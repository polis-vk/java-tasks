package ru.mail.polis.homework.reflection;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Arrays;
import java.util.Comparator;

/**
 * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ reflectiveToString, –∫–æ—Ç–æ—Ä—ã–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 * –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
 *
 * {field_1: value_1, field_2: value_2, ..., field_n: value_n}
 *
 * –≥–¥–µ field_i - –∏–º—è –ø–æ–ª—è
 *     value_i - –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (String.valueOf),
 *               –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –º–∞—Å—Å–∏–≤–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö value —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫:
 *               [element_1, element_2, ..., element_m]
 *                 –≥–¥–µ element_i - —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (String.valueOf)
 *                 —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –≤ –º–∞—Å—Å–∏–≤–µ.
 *
 * –í—Å–µ null'—ã —Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å—Ç—Ä–æ–∫–æ–π "null".
 *
 * –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π
 * –°–Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ–ª—è, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∫–ª–∞—Å—Å–µ –æ–±—ä–µ–∫—Ç–∞,
 * –ø–æ—Ç–æ–º –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ–ª—è –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
 * –ü—Ä–∏–º–µ—Ä—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö.
 *
 * –ö–∞–∫–∏–µ –ø–æ–ª—è –≤—ã–≤–æ–¥–∏—Ç—å
 * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è. –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø–æ–ª—è, –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @SkipField
 *
 * –£–ø—Ä–æ—â–µ–Ω–∏—è
 * –ß—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫, inner –∫–ª–∞—Å—Å–æ–≤, –∏ transient –ø–æ–ª–µ–π
 *
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
 * –í –ø–∞–∫–µ—Ç–µ ru.mail.polis.homework.reflection –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª
 * –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —Ç.–∫. —Ä–µ—à–µ–Ω–∏–µ –≤–ø–æ–ª–Ω–µ —É–º–µ—â–∞–µ—Ç—Å—è —Ç—É—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤).
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ–ª—å–∑—è.
 *
 * –ë–∞–ª–ª—ã
 * –í –∑–∞–¥–∞–Ω–∏–∏ 3 —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤:
 *   Easy - –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å, –Ω–µ—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –º–∞—Å—Å–∏–≤–æ–≤, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π, –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ SkipField (4 –±–∞–ª–ª–∞)
 *   Medium - –Ω–µ—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –º–∞—Å—Å–∏–≤–æ–≤, –Ω–æ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∏ –ø–æ–ª—è —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π SkipField (6 –±–∞–ª–ª–æ–≤)
 *   Hard - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (10 –±–∞–ª–ª–æ–≤)
 *
 * –?—Ç–æ–≥–æ, –ø–æ –∑–∞–¥–∞–Ω–∏—é –º–æ–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å 20 –±–∞–ª–ª–æ–≤
 * –ë–∞–ª–ª—ã –º–æ–≥—É—Ç —Å–Ω–∏–∂–∞—Ç—å—Å—è –∑–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –∫–æ–¥
 */
public class ReflectionToStringHelper {

    public static String reflectiveToString(Object object) {
        if (object == null) {
            return "null";
        }
        Class<?> objectClass = object.getClass();
        StringBuilder answer = new StringBuilder();
        while (objectClass != Object.class) {
            Field[] fields = objectClass.getDeclaredFields();
            Arrays.sort(fields, Comparator.comparing(Field::getName));
            for (Field field : fields) {
                if (field.isAnnotationPresent(SkipField.class) || Modifier.isStatic(field.getModifiers())) {
                } else {
                    field.setAccessible(true);
                    if (field.getType().isArray()) {
                        arrayFieldToStringBuilder(field, answer, object);
                    } else {
                        toStringBuilder(field, answer, object);
                    }
                    answer.append(", ");
                }
            }
            objectClass = objectClass.getSuperclass();
        }
        if (answer.length() >= 2) {
            answer.setLength(answer.length() - 2); // im too lazy to make it better
        }

        return wrapInBracketsCurly(answer);
    }

    private static void arrayFieldToStringBuilder(Field field, StringBuilder answer, Object object) {
        try {
            answer.append(field.getName()).append(": ");
            if (field.get(object) == null) {
                answer.append("null");
            } else {
                StringBuilder answerPart = new StringBuilder();
                Object arrayObject = field.get(object);
                for (int iter = 0; iter < Array.getLength(arrayObject); iter++) {
                    answerPart.append(Array.get(arrayObject, iter)).append(", ");
                }
                if (Array.getLength(arrayObject) > 0) {
                    answerPart.setLength(answerPart.length() - 2); // im too lazy to make it better
                }
                answer.append(wrapInBracketsSquare(answerPart));
            }
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    private static void toStringBuilder(Field field, StringBuilder answer, Object object) {
        try {
            answer.append(field.getName()).append(": ");
            if (field.get(object) == null) {
                answer.append("null");
            } else {
                answer.append(field.get(object));
            }
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    private static String wrapInBracketsCurly(StringBuilder answer){
        return "{" + answer.toString() + "}";
    }

    private static StringBuilder wrapInBracketsSquare(StringBuilder answer){
        return new StringBuilder("[").append(answer).append("]");
    }
}
