package ru.mail.polis.homework.simple;

import java.util.Arrays;

/**
 * Возможно вам понадобится класс Math с его методами. Например, чтобы вычислить квадратный корень, достаточно написать
 * Math.sqrt(1.44)
 * Чтобы увидеть все методы класса Math, достаточно написать Math. и среда вам сама покажет возможные методы.
 * Для просмотра подробной документации по выбранному методу нажмите Ctrl + q
 */
public class DoubleAdvancedTask {

    /**
     * Вывести три корня кубического уравнения через запятую: a * x ^ 3 + b * x ^ 2 + c * x + d = 0;
     * Вывод менять не нужно, надо только посчитать x1, x2 и x3, где x1 >= x2 >= x3
     * Считаем, что все три корня вещественные.
     * <p>
     * Если используете какой-то конкретный способ, напишите какой.
     * Пример: (1, -4, -7, 10) -> "-2.0, 1.0, 5.0"
     */
    public static String equation(int a, int b, int c, int d) {
        // Решение кубического уравнения через тригонометрическую формулу Виета
        // Подробнее: https://ru.wikipedia.org/wiki/Тригонометрическая_формула_Виета
        double x1;
        double x2;
        double x3;
        double[] roots = new double[3];

        // Из условия известно, что у данного уравнения есть три вещественных корня
        // Следовательно, все расчёты ниже подходят только для этого случая

        // Рассмотрим несколько краевых моментов, которые не решаются вышеуказанной формулой
        if (b == 0 && c == 0 && d == 0) {
            // Случай a * x^3 = 0
            x1 = 0;
            x2 = 0;
            x3 = 0;
        } else if (b != 0 && c == 0 && d == 0) {
            // Случай a * x^3 + b * x^2 = 0
            x1 = (double) -b / a;
            x2 = 0;
            x3 = 0;
        } else if (b == 0 && c != 0 && d == 0) {
            // Случай a * x^3 + c * x = 0
            x1 = Math.sqrt((double) -c / a);
            x2 = 0;
            x3 = -x1;
        } else {
            // Решение по формуле
            // Пусть наше уравнение: a * x^3 + b * x^2 + c * x + d = 0
            // Будет преобразовано делением на коэффициент a.
            // Тогда, его вид: x^3 + n * x^2 + m * x + p = 0
            // (только такой вид уравнения может быть решён c помощью формулы)
            double n = (double) b / a; // a
            double m = (double) c / a; // b
            double p = (double) d / a; // c

            // Следующие вычисления объяснены на сайте по ссылке выше
            double q = (3 * m - n * n) / 9;
            double r = (9 * n * m - 2 * n * n * n - 27 * p) / 54;
            double s = q * q * q + r * r;

            // Вариант с s > 0 не рассматривается потому, что он ведёт к появлению комплексных корней
            // А по условию такого быть не может
            if (s < 0) {
                double f = Math.acos(r / Math.sqrt(-(q * q * q))) / 3;

                x1 = 2 * Math.sqrt(-q) * Math.cos(f) - n / 3;
                x2 = 2 * Math.sqrt(-q) * Math.cos(f + (2 * Math.PI) / 3) - n / 3;
                x3 = 2 * Math.sqrt(-q) * Math.cos(f - (2 * Math.PI) / 3) - n / 3;
            } else {
                x1 = -2 * Math.pow(3, 1f / 3) - n / 3;
                x2 = Math.pow(3, 1f / 3) - n / 3; // Данный корень имеет вторую степень кратности
                x3 = x2;
            }
        }

        // Сортировка полученных значений для будущего вывода
        roots[0] = x1;
        roots[1] = x2;
        roots[2] = x3;

        Arrays.sort(roots);

        return roots[2] + ", " + roots[1] + ", " + roots[0];
    }

    /**
     * Нужно посчитать расстояние, между двумя прямыми
     * Примеры: (1, 1, 2, -1) -> 0
     * (0, 1, 0, 5) -> 4
     */
    public static float length(double a1, double b1, double a2, double b2) {
        // Если коэффициенты нули при x, то прямые - горизонтали, расстояние между которыми равно разнице значений b.
        if (Double.compare(a1, 0) == 0 && Double.compare(a2, 0) == 0) {
            return (float) Math.abs(b1 - b2);
        }

        // Если коэффициенты при x не равны, то прямые не параллельны, а значит когда-то пересекутся => расстояние = 0.
        if (Double.compare(a1, a2) != 0) {
            return 0;
        }

        // В ином другом случае графики прямых будут параллельными и прямыми

        // Рассмотрим прямоугольный треугольник, заключённый между осями и одной из прямых
        // Тогда мы можем рассчитать катеты и гипотенузу, а затем найти высоту, опущенную на гипотенузу этого треугольника
        // Эта высота будет являться расстоянием между этими прямыми
        // Высоту найдём с помощью среднего геометрического (подробнее: https://www-formula.ru/heightrectangulartriangle)
        double side1 = Math.abs(b1 - b2);
        double side2 = Math.abs((-b1 / a1) + (b2 / a2));
        double hypotenuse = Math.sqrt(side1 * side1 + side2 * side2);

        return (float) ((side1 * side2) / hypotenuse);
    }

    /**
     * Даны три точки в пространстве (x1, y1, z1) , (x2, y2, z2) и (x3, y3, z3). Вам нужно найти Z координату
     * четвертой точки (x4, y4, z4), которая находится на той же плоскости что и первые три.
     * (0, 0, 1,
     * 1, 1, 1,
     * 10, 100, 1,
     * 235, -5) -> 1
     */
    public static double surfaceFunction(int x1, int y1, int z1,
                                         int x2, int y2, int z2,
                                         int x3, int y3, int z3,
                                         int x4, int y4) {
        // Выведем уравнение плоскости по трём точкам, выраженным через определитель матрицы
        // | x2 - x1  y2 - y1  z2 - z1 |
        // | x3 - x1  y3 - y1  z3 - z1 | = 0
        // |  x - x1   y - y1   z - z1 |
        // Разложим определитель матрицы по последней строке:
        // Получим уравнение, где X - минор матрицы по первому элементу третьей строки, Y - минор второго элемента,
        // а Z - минор третьего элемента
        // X - Y + Z = 0
        // Вместо x и y подставим в уравнение значения x4 и y4, соответственно.
        // Тогда получим: X(x4) - Y(y4) + Z = 0.
        // Z = (z - z1) * | x2 - x1  y2 - y1 | (пусть определитель этой матрицы 2х2 равен D)
        //                | x3 - x1  y3 - y1 |
        // Выразим z из этого уравнения: z = ((Y - Z) / D) + z1

        // Минор X
        int x = (x4 - x1) * ((y2 - y1) * (z3 - z1) - (y3 - y1) * (z2 - z1));

        // Минор Y
        int y = (y4 - y1) * ((x2 - x1) * (z3 - z1) - (x3 - x1) * (z2 - z1));

        // Определитель D
        int d = (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1);

        // Итоговое значение координаты z
        return (double) (y - x) / d + z1;
    }
}
