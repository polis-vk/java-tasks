package ru.mail.polis.homework.simple;

/**
 * Возможно вам понадобится класс Math с его методами. Например, чтобы вычислить квадратный корень, достаточно написать
 * Math.sqrt(1.44)
 * Чтобы увидеть все методы класса Math, достаточно написать Math. и среда вам сама покажет возможные методы.
 * Для просмотра подробной документации по выбранному методу нажмите Ctrl + q
 */
public class DoubleAdvancedTask {

    /**
     * Вывести три корня кубического уравнения через запятую: a * x ^ 3 + b * x ^ 2 + c * x + d = 0;
     * Вывод менять не нужно, надо только посчитать x1, x2 и x3, где x1 >= x2 >= x3
     * Считаем, что все три корня вещественные.
     * <p>
     * Если используете какой-то конкретный способ, напишите какой.
     * Пример: (1, -4, -7, 10) -> "-2.0, 1.0, 5.0"
     */
    public static String equation(int a, int b, int c, int d) {
        double x1 = 0;
        double x2 = 0;
        double x3 = 0;
        return x1 + ", " + x2 + ", " + x3;
    }

    /**
     * Нужно посчитать расстояние, между двумя прямыми
     * Примеры: (1, 1, 2, -1) -> 0
     * (0, 1, 0, 5) -> 4
     */
    public static float length(double a1, double b1, double a2, double b2) {
        // Если коэффициенты нули при x, то прямые - горизонтали, расстояние между которыми равно разнице значений b.
        if (a1 == 0 && a2 == 0) {
            return (float) Math.abs(b1 - b2);
        }

        // Если коэффициенты при x не равны, то прямые не параллельны, а значит когда-то пересекутся => расстояние = 0.
        if (a1 != a2) {
            return 0;
        }

        // В ином другом случае графики прямых будут параллельными и прямыми

        // Рассмотрим прямоугольный треугольник, заключённый между осями и одной из прямых
        // Тогда мы можем рассчитать катеты и гипотенузу, а затем найти высоту, опущенную на гипотенузу этого треугольника
        // Эта высота будет являться расстоянием между этими прямыми
        // Высоту найдём с помощью среднего геометрического (подробнее: https://www-formula.ru/heightrectangulartriangle)
        float side1 = (float) Math.abs(b1 - b2);
        float side2 = (float) Math.abs((-b1 / a1) + (b2 / a2));
        float hypotenuse = (float) Math.sqrt(side1 * side1 + side2 * side2);

        return (side1 * side2) / hypotenuse;
    }

    /**
     * Даны три точки в пространстве (x1, y1, z1) , (x2, y2, z2) и (x3, y3, z3). Вам нужно найти Z координату
     * четвертой точки (x4, y4, z4), которая находится на той же плоскости что и первые три.
     * (0, 0, 1,
     * 1, 1, 1,
     * 10, 100, 1,
     * 235, -5) -> 1
     */
    public static double surfaceFunction(int x1, int y1, int z1,
                                         int x2, int y2, int z2,
                                         int x3, int y3, int z3,
                                         int x4, int y4) {
        return 0;
    }
}
